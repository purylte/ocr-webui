package templates

templ MainLayout() {
<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<script src="https://unpkg.com/htmx.org@2.0.2"></script>
	<script src="https://cdn.jsdelivr.net/gh/gnat/css-scope-inline/script.js"></script>
	<script src="https://cdn.jsdelivr.net/gh/gnat/surreal@main/surreal.js"></script>
	<title>OCR Web UI</title>
</head>

<body>
	<div>
		<style>
			me {
				display: flex;
				column-gap: 1rem;
			}
		</style>
		@ClipboardUpload("'#img-container'")
		<form hx-post="/upload" hx-target="#img-container" hx-swap="innerHTML" enctype="multipart/form-data"
			hx-on::after-request="this.reset()">
			<input type="file" name="image" accept="image/*" required hx- />
			<button type="submit" class="upload-button">Upload</button>
			<div class="loading-indicator">Loading...</div>
			<style>
				.loading-indicator {
					display: none;
				}

				.htmx-request .loading-indicator {
					display: inline;
				}

				.htmx-request .upload-button {
					display: none;
				}
			</style>
		</form>
	</div>
	<div>
		<canvas></canvas>
		<div id="img-container">
			<div id="img">
				Upload or CTRL+V
			</div>
		</div>
		<style>
			me {
				background: red;
			}

			me img {
				z-index: 0;
				position: relative;
			}

			me canvas {
				z-index: 20;
				position: absolute;
			}
		</style>
		<script>
			const pos = { start: { x: null, y: null }, end: { x: null, y: null } }
			let canvas;
			let ctx;
			window.onload = (e) => {
				canvas = me("canvas")
				ctx = canvas.getContext("2d")
				calculateCanvasBound()

				canvas.onmousedown = function (e) {
					clearPosForm()
					pos.start = getPosition(e)
					clearTimeout(submitPosFormTimer);
				}
				canvas.onmousemove = function (e) {
					const { x, y } = getPosition(e)
					drawRect(ctx, pos.start.x, pos.start.y, x, y)
				}
				canvas.onmouseup = function (e) {
					pos.end = getPosition(e)
					drawRect(ctx, pos.start.x, pos.start.y, pos.end.x, pos.end.y)
					fillPosForm(pos.start.x, pos.start.y, pos.end.x, pos.end.y)
					submitPosFormDebounce()
					clearPos()
				}
			}

			let debounceTimer;
			const debounceDelay = 300;


			me("#img-container").on('htmx:afterSettle', function (evt) {
				calculateCanvasBound()
				clearPosForm()
			});



			const calculateCanvasBound = function (e) {
				const img = document.getElementById("img")
				canvas.width = img.width
				canvas.height = img.height
			}

			const clearPos = function () {
				pos.start.x = null
				pos.start.y = null
				pos.end.x = null
				pos.end.y = null
			}

			const getPosition = function (e) {
				const rect = e.target.getBoundingClientRect();
				const x = Math.round(e.clientX - rect.left);
				const y = Math.round(e.clientY - rect.top);
				return { x: x, y: y }
			}

			const drawRect = function (ctx, a, b, x, y) {
				if (a !== null && b !== null && x !== null && y !== null) {
					if (a > x) {
						[a, x] = [x, a]
					}
					if (b > y) {
						[b, y] = [y, b]
					}
					ctx.clearRect(0, 0, canvas.width, canvas.height);
					ctx.strokeRect(a, b, x - a, y - b)
				}
			}
		</script>
	</div>
	<div id="scan-loading" class="htmx-indicator">
		...
	</div>

	<form hx-post="/crop" id="posForm" hx-target="#response-img" hx-swap="innerHTML" hx-indicator="#scan-loading"
		hidden>
		<input type="number" class="pos-input" name="a" required />
		<input type="number" class="pos-input" name="b" required />
		<input type="number" class="pos-input" name="x" required />
		<input type="number" class="pos-input" name="y" required />
		<script>
			let submitPosFormTimer;
			const submitPosFormDebounce = function () {
				submitPosFormTimer = setTimeout(() => {
					const form = document.getElementById("posForm")
					htmx.trigger(form, 'submit')
				}, 300); // 300ms delay
			}
			const PosFormIsValid = function () {
				const inputs = any(".pos-input")
				const allFilled = inputs.every((inp) => inp.value !== "");
				console.log(inputs[2].value - inputs[0].value)
				return allFilled && inputs[2].value - inputs[0].value >= 1 && inputs[3].value - inputs[1].value >= 1
			}
			const clearPosForm = function () {
				const inputs = any(".pos-input")
				inputs.forEach(i => i.value = "")
			}
			const fillPosForm = function (a, b, x, y) {
				const inputs = any(".pos-input")
				if (a > x) {
					[a, x] = [x, a]
				}
				if (b > y) {
					[b, y] = [y, b]
				}
				inputs[0].value = a
				inputs[1].value = b
				inputs[2].value = x
				inputs[3].value = y
			}
		</script>
	</form>
	<div id="response-img">
		<div>
		</div>
	</div>
</body>

</html>
}